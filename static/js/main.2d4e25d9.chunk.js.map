{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","containers/AppContainer.js","containers/RootContainer.js","store/index.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","Footer","App","iteration","handleClick","fetchData","this","_this$props","isLoading","selectOptions","photos","isValid","react","select_default","mode","hideTick","placeholder","options","renderPopupOnFocus","spin_default","size","visible","React","decorate","observable","inject","stores","context","appStore","albums","map","el","value","id","text","concat","observer","RootContainer","Fragment","components_Header","AppContainer","components_Footer","AppStore","part","_this","fetch","then","res","json","result","console","log","action","reduce","acc","val","length","push","albumId","url","title","thumbnailUrl","catch","e","getPart","slice","Boolean","window","location","hostname","match","ReactDOM","render","index_module","containers_RootContainer","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2d4e25d9.chunk.js","sourcesContent":["import React from 'react'\r\nimport './styles.sass'\r\n\r\nconst Header = props => {\r\n    return (\r\n      <header className=\"header\">\r\n        This is Header\r\n      </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport './styles.sass'\r\n\r\nconst Footer = props => {\r\n    return (\r\n      <footer className=\"footer\">\r\n        This is Header\r\n      </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import * as React from 'react'\r\nimport Button from 'arui-feather/button'\r\nimport Select from 'arui-feather/select'\r\nimport Spin from 'arui-feather/spin'\r\nimport { observable, decorate, toJS } from 'mobx'\r\nimport { observer, inject } from 'mobx-react'\r\n\r\nclass App extends React.Component {\r\n\r\n  iteration = 0;\r\n\r\n  componentDidMount() {\r\n    const { fetchData } = this.props\r\n    fetchData()\r\n  }\r\n\r\n  handleClick = () => {\r\n  };\r\n\r\n  render() {\r\n    const { isLoading, photos, selectOptions, isValid } = this.props\r\n    if (!isValid) {\r\n      return isLoading ? <Spin size='l' visible={ true }/> : null\r\n    }\r\n    return (\r\n      <main className=\"container\">\r\n        <Select\r\n                mode='radio'\r\n                hideTick={ true }\r\n                placeholder='Choose Album'\r\n                options={ selectOptions }\r\n                renderPopupOnFocus={ true }\r\n        />\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\r\ndecorate(App, {\r\n  iteration: observable,\r\n})\r\n\r\nexport default inject((stores, props, context) => {\r\n  const selectOptions = stores.appStore.photos.albums.map(el => ({ value: el.id, text: `Album - #${ el.id }` }))\r\n    return {\r\n        isLoading: stores.appStore.isLoading,\r\n        fetchData: stores.appStore.fetchData,\r\n        photos: stores.appStore.photos.albums,\r\n        isValid: stores.appStore.isValid,\r\n        selectOptions\r\n    }\r\n})(observer(App))\r\n","import React from 'react'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport App from './AppContainer'\n\nconst RootContainer = props => {\n  return (\n    <React.Fragment>\n      <Header />\n      <App />\n      <Footer />\n    </React.Fragment>\n  ) \n} \n\nexport default RootContainer","import { observable, action, decorate  } from 'mobx'\r\nimport { normalize, schema } from 'normalizr'\r\n\r\nclass AppStore {\r\n  photos = { albums: [] };\r\n  part = [];\r\n  iteration = 0;\r\n  isLoading = false;\r\n  isValid = false;\r\n  \r\n  fetchData = () => {\r\n    this.isLoading = true\r\n    fetch('https://jsonplaceholder.typicode.com/photos')\r\n    .then(res => res.json())\r\n    .then(result => {\r\n      console.log(result)\r\n      action(() => {\r\n        // Define a users schema\r\n        const json = result.reduce((acc, val) => {\r\n          if(!acc.albums.length) {\r\n            acc.albums.push({ id: val.albumId })\r\n            acc.albums[ acc.albums.length-1 ].photos = []\r\n          }\r\n          if (acc.albums[ acc.albums.length-1 ].id !== val.albumId) {\r\n            acc.albums.push({ id: val.albumId })\r\n            acc.albums[ acc.albums.length-1 ].photos = []\r\n          }\r\n          acc.albums[ acc.albums.length-1 ].photos.push({ id: val.id, url: val.url,  title: val.title, thumbnailUrl: val.thumbnailUrl })\r\n          return acc\r\n        }, {\r\n          albums: []\r\n        })\r\n        console.log(json)\r\n        this.photos = json\r\n        this.isLoading = false\r\n        this.isValid = true\r\n      })()\r\n      \r\n    }).catch(e => {\r\n      console.log(e)\r\n    })\r\n  }\r\n\r\n  getPart = (a, value) => {\r\n    this.part = this.photos.slice(a, value)\r\n  }\r\n}\r\ndecorate(AppStore, {\r\n    iteration: observable,\r\n    isValid: observable,\r\n    part: observable,\r\n    photos: observable,\r\n    isLoading: observable,\r\n    fetchData: action,\r\n    getPart: action,\r\n})\r\n\r\nconst appStore = new AppStore()\r\n\r\nexport default appStore\r\nexport { appStore }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider, propTypes } from 'mobx-react'\nimport RootContainer from './containers/RootContainer'\nimport appStore from './store'\nimport './index.sass'\nimport * as serviceWorker from './serviceWorker'\n\nconst stores = { appStore }\n\nReactDOM.render(\n  <Provider { ...stores }>\n    <RootContainer />\n  </Provider>, document.getElementById('root'))\nserviceWorker.unregister()\n"],"sourceRoot":""}