{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/Album/idnex.js","containers/AppContainer.js","containers/RootContainer.js","store/index.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","Footer","Album","state","images","isValid","_this2","this","album","Promise","resolve","reject","photos","map","photo","img","Image","src","thumbnailUrl","onload","push","length","then","res","setState","prevProps","prevState","_this3","id","react","key","alt","title","spin_default","size","visible","React","App","iteration","handleChange","ev","setAlbumId","_this","console","log","fetchData","_this$props","isLoading","selectOptions","toJS","select_default","mode","hideTick","placeholder","options","onChange","idnex","decorate","observable","inject","stores","context","appStore","albums","el","value","text","concat","observer","RootContainer","Fragment","components_Header","AppContainer","components_Footer","AppStore","part","albumId","fetch","json","action","reduce","acc","val","url","catch","e","filter","getPart","slice","Boolean","window","location","hostname","match","ReactDOM","render","index_module","containers_RootContainer","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.12657c58.chunk.js","sourcesContent":["import React from 'react'\r\nimport './styles.sass'\r\n\r\nconst Header = props => (<header className=\"header\"></header>)\r\n\r\nexport default Header","import React from 'react'\r\nimport './styles.sass'\r\n\r\nconst Footer = props => <footer className=\"footer\"></footer>\r\n\r\nexport default Footer","import * as React from 'react'\r\nimport Plate from 'arui-feather/plate'\r\nimport Spin from 'arui-feather/spin'\r\nimport './styles.sass'\r\n\r\nclass Album extends React.Component {\r\n    state = {\r\n        images: [], \r\n        isValid: false\r\n    }\r\n    componentDidMount() {\r\n        const { album } = this.props\r\n        const images = []\r\n        const promise = new Promise((resolve, reject) => {\r\n            album.photos.map(photo => {\r\n                const img = new Image(150, 150)\r\n                img.src = photo.thumbnailUrl\r\n                img.onload = () => {\r\n                    images.push(img)\r\n                    if(images.length === album.photos.length) {\r\n                        resolve(images)\r\n                    }\r\n                }\r\n                return img\r\n            })\r\n        })\r\n        promise.then(res => this.setState({ isValid: true }))\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if(prevProps.album.id !== this.props.album.id) {\r\n            this.setState({ isValid: false })\r\n            const { album } = this.props\r\n            const images = []\r\n            const promise = new Promise((resolve, reject) => {\r\n                album.photos.map(photo => {\r\n                    const img = new Image(150, 150)\r\n                    img.src = photo.thumbnailUrl\r\n                    img.onload = () => {\r\n                        images.push(img)\r\n                        if(images.length === album.photos.length) {\r\n                            resolve(images)\r\n                        }\r\n                    }\r\n                    \r\n                })\r\n            })\r\n            promise.then(res => this.setState({ isValid: true }))\r\n        }\r\n    }\r\n    render() {\r\n        const { album } = this.props\r\n        const { isValid } = this.state\r\n        if(isValid) {\r\n            return (\r\n              <ul className=\"gallery\">\r\n                {album.photos.map((photo) => (<li key={photo.id} className=\"gallery__item\">\r\n                  <img src={photo.thumbnailUrl} alt={photo.title} />\r\n                </li>))\r\n                  }\r\n              </ul>\r\n            )\r\n        }\r\n        return <Spin size='l' visible={true} className=\"loader\"/>\r\n    }\r\n    \r\n}\r\n\r\nexport default Album","import * as React from 'react'\r\nimport Button from 'arui-feather/button'\r\nimport Select from 'arui-feather/select'\r\nimport Spin from 'arui-feather/spin'\r\nimport { observable, decorate, toJS } from 'mobx'\r\nimport { observer, inject } from 'mobx-react'\r\nimport Album from '../components/Album/idnex'\r\n\r\nclass App extends React.Component {\r\n\r\n  iteration = 0;\r\n\r\n  componentDidMount() {\r\n    const { fetchData } = this.props\r\n    fetchData()\r\n  }\r\n\r\n  handleChange = ev => {\r\n    const { setAlbumId } = this.props\r\n    setAlbumId(ev[0])\r\n    console.log(ev)\r\n  };\r\n\r\n  render() {\r\n    const { isLoading, selectOptions, isValid, album } = this.props\r\n    console.log(toJS(album))\r\n    if (!isValid) {\r\n      return isLoading ? <Spin size='l' visible={true} className=\"loader\"/> : null\r\n    }\r\n    return (\r\n      <main className=\"container\">\r\n        <Select\r\n          mode='radio-check'\r\n          hideTick={true}\r\n          placeholder='Choose Album'\r\n          options={selectOptions}\r\n          onChange={this.handleChange}\r\n          className=\"select\"\r\n        />\r\n        {album ? <Album album={album} /> : null}\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\r\ndecorate(App, {\r\n  iteration: observable,\r\n})\r\n\r\nexport default inject((stores, props, context) => {\r\n  console.log(stores)\r\n  const selectOptions = stores.appStore.photos.albums.map(el => ({ value: el.id, text: `Album - #${ el.id }` }))\r\n    return {\r\n        isLoading: stores.appStore.isLoading,\r\n        fetchData: stores.appStore.fetchData,\r\n        setAlbumId: stores.appStore.setAlbumId,\r\n        album: stores.appStore.album,\r\n        photos: stores.appStore.photos.albums,\r\n        isValid: stores.appStore.isValid,\r\n        selectOptions\r\n    }\r\n})(observer(App))\r\n","import React from 'react'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport App from './AppContainer'\n\nconst RootContainer = props => {\n  return (\n    <React.Fragment>\n      <Header />\n      <App />\n      <Footer />\n    </React.Fragment>\n  ) \n} \n\nexport default RootContainer","import { observable, action, decorate, toJS  } from 'mobx'\r\nimport { normalize, schema } from 'normalizr'\r\n\r\nclass AppStore {\r\n  photos = { albums: [] };\r\n  part = [];\r\n  iteration = 0;\r\n  isLoading = false;\r\n  isValid = false;\r\n  albumId = null;\r\n  album = null;\r\n  \r\n  fetchData = () => {\r\n    this.isLoading = true\r\n    fetch('https://jsonplaceholder.typicode.com/photos')\r\n    .then(res => res.json())\r\n    .then(json => {\r\n      action(() => {\r\n        this.photos = json.reduce((acc, val) => {\r\n          if(!acc.albums.length) {\r\n            acc.albums.push({ id: val.albumId })\r\n            acc.albums[acc.albums.length-1].photos = []\r\n          }\r\n          if (acc.albums[acc.albums.length-1].id !== val.albumId) {\r\n            acc.albums.push({ id: val.albumId })\r\n            acc.albums[acc.albums.length-1].photos = []\r\n          }\r\n          acc.albums[acc.albums.length-1].photos.push({ id: val.id, url: val.url,  title: val.title, thumbnailUrl: val.thumbnailUrl })\r\n          return acc\r\n        }, {\r\n          albums: []\r\n        })\r\n        this.isLoading = false\r\n        this.isValid = true\r\n      })()\r\n      \r\n    }).catch(e => {\r\n      this.isLoading = false\r\n      console.log(e)\r\n    })\r\n  }\r\n\r\n  setAlbumId = id => {\r\n    this.albumId = id\r\n    this.album = this.photos.albums.filter(album => album.id === id)[0]\r\n  }\r\n\r\n  getPart = (a, value) => {\r\n    this.part = this.photos.slice(a, value)\r\n  }\r\n}\r\ndecorate(AppStore, {\r\n    iteration: observable,\r\n    albumId: observable,\r\n    album: observable,\r\n    isValid: observable,\r\n    part: observable,\r\n    photos: observable,\r\n    isLoading: observable,\r\n    fetchData: action,\r\n    getPart: action,\r\n})\r\n\r\nconst appStore = new AppStore()\r\n\r\nexport default appStore\r\nexport { appStore }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider, propTypes } from 'mobx-react'\nimport RootContainer from './containers/RootContainer'\nimport appStore from './store'\nimport './index.sass'\nimport * as serviceWorker from './serviceWorker'\n\nconst stores = { appStore }\n\nReactDOM.render(\n  <Provider {...stores}>\n    <RootContainer />\n  </Provider>, document.getElementById('root'))\nserviceWorker.unregister()\n"],"sourceRoot":""}