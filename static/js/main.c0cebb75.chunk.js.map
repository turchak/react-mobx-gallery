{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/Album/idnex.js","containers/AppContainer.js","containers/RootContainer.js","store/index.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","Footer","Album","state","images","isValid","_this2","this","album","Promise","resolve","reject","photos","map","photo","img","Image","src","thumbnailUrl","onload","push","length","then","res","setState","prevProps","prevState","_this3","id","react","key","plate_default","alt","title","spin_default","size","visible","React","App","iteration","handleChange","ev","setAlbumId","_this","console","log","fetchData","_this$props","isLoading","selectOptions","toJS","select_default","mode","hideTick","placeholder","options","onChange","idnex","decorate","observable","inject","stores","context","appStore","albums","el","value","text","concat","observer","RootContainer","Fragment","components_Header","AppContainer","components_Footer","AppStore","part","albumId","fetch","json","action","reduce","acc","val","url","catch","e","filter","getPart","slice","Boolean","window","location","hostname","match","ReactDOM","render","index_module","containers_RootContainer","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0cebb75.chunk.js","sourcesContent":["import React from 'react'\r\nimport './styles.sass'\r\n\r\nconst Header = props => (<header className=\"header\"></header>)\r\n\r\nexport default Header","import React from 'react'\r\nimport './styles.sass'\r\n\r\nconst Footer = props => <footer className=\"footer\"></footer>\r\n\r\nexport default Footer","import * as React from 'react'\r\nimport Plate from 'arui-feather/plate'\r\nimport Spin from 'arui-feather/spin'\r\n\r\nclass Album extends React.Component {\r\n    state = {\r\n        images: [], \r\n        isValid: false\r\n    }\r\n    componentDidMount() {\r\n        const { album } = this.props\r\n        const images = []\r\n        const promise = new Promise((resolve, reject) => {\r\n            album.photos.map(photo => {\r\n                const img = new Image(150, 150)\r\n                img.src = photo.thumbnailUrl\r\n                img.onload = () => {\r\n                    images.push(img)\r\n                    if(images.length === album.photos.length) {\r\n                        resolve(images)\r\n                    }\r\n                }\r\n                return img\r\n            })\r\n        })\r\n        promise.then(res => this.setState({ isValid: true }))\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if(prevProps.album.id !== this.props.album.id) {\r\n            this.setState({ isValid: false })\r\n            const { album } = this.props\r\n            const images = []\r\n            const promise = new Promise((resolve, reject) => {\r\n                album.photos.map(photo => {\r\n                    const img = new Image(150, 150)\r\n                    img.src = photo.thumbnailUrl\r\n                    img.onload = () => {\r\n                        images.push(img)\r\n                        if(images.length === album.photos.length) {\r\n                            resolve(images)\r\n                        }\r\n                    }\r\n                    \r\n                })\r\n            })\r\n            promise.then(res => this.setState({ isValid: true }))\r\n        }\r\n    }\r\n    render() {\r\n        const { album } = this.props\r\n        const { isValid } = this.state\r\n        if(isValid) {\r\n            return (\r\n              <ul className=\"list\">\r\n                {album.photos.map((photo) => (<li key={ photo.id }>\r\n                  <Plate>\r\n                    <img src={ photo.thumbnailUrl } alt={ photo.title } />\r\n                  </Plate>\r\n                </li>))\r\n                  }\r\n              </ul>\r\n              )\r\n        }\r\n        return <Spin size='l' visible={ true } className=\"loader\"/>\r\n    }\r\n    \r\n}\r\n\r\nexport default Album","import * as React from 'react'\r\nimport Button from 'arui-feather/button'\r\nimport Select from 'arui-feather/select'\r\nimport Spin from 'arui-feather/spin'\r\nimport { observable, decorate, toJS } from 'mobx'\r\nimport { observer, inject } from 'mobx-react'\r\nimport Album from '../components/Album/idnex'\r\n\r\nclass App extends React.Component {\r\n\r\n  iteration = 0;\r\n\r\n  componentDidMount() {\r\n    const { fetchData } = this.props\r\n    fetchData()\r\n  }\r\n\r\n  handleChange = ev => {\r\n    const { setAlbumId } = this.props\r\n    setAlbumId(ev[0])\r\n    console.log(ev)\r\n  };\r\n\r\n  render() {\r\n    const { isLoading, selectOptions, isValid, album } = this.props\r\n    console.log(toJS(album))\r\n    if (!isValid) {\r\n      return isLoading ? <Spin size='l' visible={ true } className=\"loader\"/> : null\r\n    }\r\n    return (\r\n      <main className=\"container\">\r\n        <Select\r\n          mode='radio-check'\r\n          hideTick={ true }\r\n          placeholder='Choose Album'\r\n          options={ selectOptions }\r\n          onChange={ this.handleChange }\r\n        />\r\n        {album ? <Album album={ album } /> : null}\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\r\ndecorate(App, {\r\n  iteration: observable,\r\n})\r\n\r\nexport default inject((stores, props, context) => {\r\n  console.log(stores)\r\n  const selectOptions = stores.appStore.photos.albums.map(el => ({ value: el.id, text: `Album - #${ el.id }` }))\r\n    return {\r\n        isLoading: stores.appStore.isLoading,\r\n        fetchData: stores.appStore.fetchData,\r\n        setAlbumId: stores.appStore.setAlbumId,\r\n        album: stores.appStore.album,\r\n        photos: stores.appStore.photos.albums,\r\n        isValid: stores.appStore.isValid,\r\n        selectOptions\r\n    }\r\n})(observer(App))\r\n","import React from 'react'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport App from './AppContainer'\n\nconst RootContainer = props => {\n  return (\n    <React.Fragment>\n      <Header />\n      <App />\n      <Footer />\n    </React.Fragment>\n  ) \n} \n\nexport default RootContainer","import { observable, action, decorate, toJS  } from 'mobx'\r\nimport { normalize, schema } from 'normalizr'\r\n\r\nclass AppStore {\r\n  photos = { albums: [] };\r\n  part = [];\r\n  iteration = 0;\r\n  isLoading = false;\r\n  isValid = false;\r\n  albumId = null;\r\n  album = null;\r\n  \r\n  fetchData = () => {\r\n    this.isLoading = true\r\n    fetch('https://jsonplaceholder.typicode.com/photos')\r\n    .then(res => res.json())\r\n    .then(json => {\r\n      action(() => {\r\n        this.photos = json.reduce((acc, val) => {\r\n          if(!acc.albums.length) {\r\n            acc.albums.push({ id: val.albumId })\r\n            acc.albums[acc.albums.length-1].photos = []\r\n          }\r\n          if (acc.albums[acc.albums.length-1].id !== val.albumId) {\r\n            acc.albums.push({ id: val.albumId })\r\n            acc.albums[acc.albums.length-1].photos = []\r\n          }\r\n          acc.albums[acc.albums.length-1].photos.push({ id: val.id, url: val.url,  title: val.title, thumbnailUrl: val.thumbnailUrl })\r\n          return acc\r\n        }, {\r\n          albums: []\r\n        })\r\n        this.isLoading = false\r\n        this.isValid = true\r\n      })()\r\n      \r\n    }).catch(e => {\r\n      this.isLoading = false\r\n      console.log(e)\r\n    })\r\n  }\r\n\r\n  setAlbumId = id => {\r\n    this.albumId = id\r\n    this.album = this.photos.albums.filter(album => album.id === id)[0]\r\n  }\r\n\r\n  getPart = (a, value) => {\r\n    this.part = this.photos.slice(a, value)\r\n  }\r\n}\r\ndecorate(AppStore, {\r\n    iteration: observable,\r\n    albumId: observable,\r\n    album: observable,\r\n    isValid: observable,\r\n    part: observable,\r\n    photos: observable,\r\n    isLoading: observable,\r\n    fetchData: action,\r\n    getPart: action,\r\n})\r\n\r\nconst appStore = new AppStore()\r\n\r\nexport default appStore\r\nexport { appStore }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider, propTypes } from 'mobx-react'\nimport RootContainer from './containers/RootContainer'\nimport appStore from './store'\nimport './index.sass'\nimport * as serviceWorker from './serviceWorker'\n\nconst stores = { appStore }\n\nReactDOM.render(\n  <Provider { ...stores }>\n    <RootContainer />\n  </Provider>, document.getElementById('root'))\nserviceWorker.unregister()\n"],"sourceRoot":""}