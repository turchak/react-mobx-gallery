{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/Album/index.js","components/SearchResults/index.js","containers/AppContainer.js","containers/RootContainer.js","store/index.js","serviceWorker.js","index.js","assets/img/gallery.svg"],"names":["Header","handleChange","ev","search","_this","props","react","className","href","src","logo","alt","input_default","a","placeholder","view","size","onChange","this","React","inject","stores","appStore","observer","Footer","react_default","createElement","Album","state","images","isValid","updatePhotos","album","Promise","resolve","reject","photos","map","photo","img","Image","thumbnailUrl","onload","push","length","then","res","setState","prevProps","id","_this2","key","onClick","handleClick","title","spin_default","visible","SearchResults","result","results","searchId","_this$state","App","setAlbumId","fetchData","_this$props","isLoading","selectOptions","searchResult","select_default","mode","hideTick","options","components_Album","components_SearchResults","albums","el","value","text","concat","part","getPart","RootContainer","Fragment","components_Header","AppContainer","components_Footer","AppStore","albumId","fetch","json","action","reduce","acc","val","url","catch","e","word","data","accumulator","includes","Object","objectSpread","toConsumableArray","Date","filter","decorate","observable","Boolean","window","location","hostname","match","ReactDOM","render","index_module","containers_RootContainer","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.027fe841.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport { observer, inject } from 'mobx-react'\r\nimport Input from 'arui-feather/input'\r\nimport logo from '../../assets/img/gallery.svg'\r\nimport './styles.sass'\r\n\r\nclass Header extends React.Component {\r\n\r\n  handleChange = ev => {\r\n    const { search } = this.props\r\n    search(ev)\r\n  }\r\n\r\n  render() {\r\n    return  (\r\n      <header className=\"header\">\r\n        <a href=\"/\" className=\"logo\">\r\n          <img src={logo} className=\"logo__img\"alt=\"logo\"/>\r\n        </a>\r\n        <Input\r\n          placeholder='Search'\r\n          view='line'\r\n          size='l'\r\n          onChange={this.handleChange}\r\n        />\r\n      </header>\r\n    ) \r\n  }\r\n}\r\n\r\nexport default inject((stores) => ({\r\n    search: stores.appStore.search\r\n}))(observer(Header))","import React from 'react'\r\nimport './styles.sass'\r\n\r\nconst Footer = props => <footer className=\"footer\"></footer>\r\n\r\nexport default Footer","import * as React from 'react'\r\nimport Spin from 'arui-feather/spin'\r\nimport './styles.sass'\r\n\r\nclass Album extends React.Component {\r\n    state = {\r\n        images: [], \r\n        isValid: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updatePhotos()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.album.id !== this.props.album.id) {\r\n            this.setState({ isValid: false })\r\n            this.updatePhotos()\r\n        }\r\n    }\r\n\r\n    updatePhotos = () => {\r\n        const { album } = this.props\r\n        const images = []\r\n        const promise = new Promise((resolve, reject) => {\r\n            album.photos.map(photo => {\r\n                const img = new Image(150, 150)\r\n                img.src = photo.thumbnailUrl\r\n                img.onload = () => {\r\n                    images.push(img)\r\n                        if(images.length === album.photos.length) {\r\n                            resolve(images)\r\n                        }\r\n                    }\r\n                return img\r\n                })\r\n            })\r\n        promise.then(res => this.setState({ isValid: true }))\r\n    }\r\n\r\n    render() {\r\n        const { album } = this.props\r\n        const { isValid } = this.state\r\n        if(isValid) {\r\n            return (\r\n              <React.Fragment>\r\n                <ul className=\"gallery\">\r\n                  {album.photos.map((photo) => (\r\n                    <li key={photo.id} className=\"gallery__item\" onClick={this.handleClick}>\r\n                      <img src={photo.thumbnailUrl} alt={photo.title} />\r\n                      <span className=\"gallery__title\">{photo.title}</span>\r\n                    </li>))\r\n                    }\r\n                </ul>\r\n              </React.Fragment>\r\n            )\r\n        }\r\n        return <Spin size='l' visible={true} className=\"loader\"/>\r\n    }\r\n}\r\n  \r\nexport default Album","import * as React from 'react'\r\nimport Spin from 'arui-feather/spin'\r\nimport './styles.sass'\r\n\r\nclass SearchResults extends React.Component {\r\n    state = {\r\n        images: [], \r\n        isValid: false,\r\n        result: null,\r\n    }\r\n    componentDidMount() {\r\n        this.updatePhotos()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { results } = this.props\r\n        if(prevProps.results.searchId !== results.searchId) {\r\n            this.updatePhotos()\r\n        }\r\n    }\r\n\r\n    updatePhotos = () => {\r\n        const { results } = this.props\r\n        if (results.photos.length === 0) {\r\n            return this.setState({\r\n                result: 'Not found'\r\n            })\r\n        }\r\n        \r\n        const images = []\r\n        const promise = new Promise((resolve, reject) => {\r\n            results.photos.map(photo => {\r\n                const img = new Image(150, 150)\r\n                img.src = photo.thumbnailUrl\r\n                img.onload = () => {\r\n                    images.push(img)\r\n                    if(images.length === results.photos.length) {\r\n                        resolve(images)\r\n                    }\r\n                }\r\n                return img\r\n            })\r\n        })\r\n        promise.then(res => this.setState({ isValid: true, result: null }))\r\n    }\r\n\r\n    render() {\r\n        const { results } = this.props\r\n        const { isValid, result } = this.state\r\n        if(result) {\r\n            return <span>{result}</span>\r\n        }\r\n        if(isValid) {\r\n            return (\r\n              <ul className=\"gallery\">\r\n                {results.photos.map((photo) => (\r\n                  <li key={photo.id} className=\"gallery__item\" onClick={this.handleClick}>\r\n                    <img src={photo.thumbnailUrl} alt={photo.title} />\r\n                    <span className=\"gallery__title\">{photo.title}</span>\r\n                  </li>))\r\n                  }\r\n              </ul>\r\n            )\r\n        }\r\n        return <Spin size='l' visible={true} className=\"loader\"/>\r\n    }\r\n    \r\n}\r\n\r\nexport default SearchResults","import * as React from 'react'\r\nimport Select from 'arui-feather/select'\r\nimport Spin from 'arui-feather/spin'\r\nimport { observer, inject } from 'mobx-react'\r\nimport Album from '../components/Album'\r\nimport SearchResults from '../components/SearchResults'\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    const { fetchData } = this.props\r\n    fetchData()\r\n  }\r\n\r\n  handleChange = ev => {\r\n    const { setAlbumId } = this.props\r\n    setAlbumId(ev[0])\r\n  };\r\n\r\n  render() {\r\n    const { isLoading, selectOptions, isValid, album, searchResult } = this.props\r\n    if (!isValid) {\r\n      return isLoading ? <Spin size='l' visible={true} className=\"loader\"/> : null\r\n    }\r\n    return (\r\n      <main className=\"container\">\r\n        <Select\r\n          mode='radio-check'\r\n          hideTick={true}\r\n          placeholder='Choose Album'\r\n          options={selectOptions}\r\n          onChange={this.handleChange}\r\n          className=\"select\"\r\n        />\r\n        {album && !searchResult? <Album album={album} /> : null}\r\n        {searchResult ? <SearchResults results={searchResult} /> : null}\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\r\nexport default inject(stores => {\r\n  const selectOptions = stores.appStore.photos.albums.map(el => ({ value: el.id, text: `Album - #${ el.id }` }))\r\n    return {\r\n        isLoading: stores.appStore.isLoading,\r\n        searchResult: stores.appStore.searchResult,\r\n        fetchData: stores.appStore.fetchData,\r\n        setAlbumId: stores.appStore.setAlbumId,\r\n        album: stores.appStore.album,\r\n        photos: stores.appStore.photos.albums,\r\n        isValid: stores.appStore.isValid,\r\n        part: stores.appStore.part,\r\n        getPart: stores.appStore.getPart,\r\n        selectOptions\r\n    }\r\n})(observer(App))\r\n","import React from 'react'\r\nimport Header from '../components/Header'\r\nimport Footer from '../components/Footer'\r\nimport App from './AppContainer'\r\n\r\nconst RootContainer = props => (\r\n  <React.Fragment>\r\n    <Header />\r\n    <App />\r\n    <Footer />\r\n  </React.Fragment>\r\n) \r\n\r\nexport default RootContainer","import { observable, action, decorate  } from 'mobx'\r\n\r\nclass AppStore {\r\n  photos = { albums: [] };\r\n  isLoading = false;\r\n  isValid = false;\r\n  albumId = null;\r\n  album = null;\r\n  searchResult: null;\r\n  \r\n  fetchData = () => {\r\n    this.isLoading = true\r\n    fetch('https://jsonplaceholder.typicode.com/photos')\r\n    .then(res => res.json())\r\n    .then(json => {\r\n      action(() => {\r\n        this.photos = json.reduce((acc, val) => {\r\n          if(!acc.albums.length) {\r\n            acc.albums.push({ id: val.albumId })\r\n            acc.albums[acc.albums.length-1].photos = []\r\n          }\r\n          if (acc.albums[acc.albums.length-1].id !== val.albumId) {\r\n            acc.albums.push({ id: val.albumId })\r\n            acc.albums[acc.albums.length-1].photos = []\r\n          }\r\n          acc.albums[acc.albums.length-1].photos.push({ id: val.id, url: val.url,  title: val.title, thumbnailUrl: val.thumbnailUrl })\r\n          return acc\r\n        }, {\r\n          albums: []\r\n        })\r\n        this.isLoading = false\r\n        this.isValid = true\r\n      })()\r\n    }).catch(e => {\r\n      this.isLoading = false\r\n    })\r\n  }\r\n\r\n  search = word => {\r\n    if (word.length <= 2) {\r\n      this.searchResult = null\r\n      return \r\n    }\r\n    const result = this.photos.albums.reduce((acc, val) => {\r\n      const data = val.photos.reduce((accumulator, value) => {\r\n        if(value.title.includes(word)) {\r\n          accumulator.push(value)\r\n          return accumulator\r\n        }\r\n        return accumulator\r\n      }, [])\r\n      return {...acc, photos: [ ...acc.photos, ...data ]}\r\n    }, {searchId: +new Date(), photos: []})\r\n    this.searchResult = result\r\n  }\r\n\r\n  setAlbumId = id => {\r\n    this.albumId = id\r\n    this.searchResult = null\r\n    this.album = this.photos.albums.filter(album => album.id === id)[0]\r\n  }\r\n}\r\ndecorate(AppStore, {\r\n    searchResult: observable,\r\n    albumId: observable,\r\n    album: observable,\r\n    isValid: observable,\r\n    photos: observable,\r\n    isLoading: observable,\r\n    fetchData: action,\r\n    search: action\r\n})\r\n\r\nconst appStore = new AppStore()\r\n\r\nexport default appStore\r\nexport { appStore }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider, propTypes } from 'mobx-react'\r\nimport RootContainer from './containers/RootContainer'\r\nimport appStore from './store'\r\nimport './index.sass'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst stores = { appStore }\r\n\r\nReactDOM.render(\r\n  <Provider {...stores}>\r\n    <RootContainer />\r\n  </Provider>, document.getElementById('root'))\r\nserviceWorker.unregister()\r\n","module.exports = __webpack_public_path__ + \"static/media/gallery.f84c4cf2.svg\";"],"sourceRoot":""}