{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/Album/index.js","components/SearchResults/index.js","containers/AppContainer.js","containers/RootContainer.js","store/index.js","serviceWorker.js","index.js","assets/img/gallery.svg"],"names":["Header","handleChange","ev","console","log","search","_this","props","react","className","href","src","logo","alt","input_default","a","placeholder","view","size","onChange","this","React","inject","stores","context","appStore","observer","Footer","react_default","createElement","Album","state","images","isValid","handleClick","_this2","album","Promise","resolve","reject","photos","map","photo","img","Image","thumbnailUrl","onload","push","length","then","res","setState","prevProps","prevState","_this3","id","_this4","key","onClick","title","spin_default","visible","SearchResults","result","results","toJS","searchId","_this$state","App","iteration","setAlbumId","fetchData","_this$props","isLoading","selectOptions","searchResult","select_default","mode","hideTick","options","components_Album","components_SearchResults","decorate","observable","albums","el","value","text","concat","RootContainer","Fragment","components_Header","AppContainer","components_Footer","AppStore","part","albumId","fetch","json","action","reduce","acc","val","url","catch","e","word","data","accumulator","includes","Object","objectSpread","toConsumableArray","Date","filter","getPart","slice","Boolean","window","location","hostname","match","ReactDOM","render","index_module","containers_RootContainer","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.70741c6d.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport { observable, decorate, toJS } from 'mobx'\r\nimport { observer, inject } from 'mobx-react'\r\nimport Input from 'arui-feather/input'\r\nimport logo from '../../assets/img/gallery.svg'\r\nimport './styles.sass'\r\n\r\nclass Header extends React.Component {\r\n\r\n  handleChange = ev => {\r\n    console.log(ev)\r\n    const { search } = this.props\r\n    search(ev)\r\n  }\r\n\r\n  render() {\r\n    return  (\r\n      <header className=\"header\">\r\n        <a href=\"/\" className=\"logo\">\r\n          <img src={logo} className=\"logo__img\"alt=\"logo\"/>\r\n        </a>\r\n        <Input\r\n          placeholder='Search'\r\n          view='line'\r\n          size='l'\r\n          onChange={this.handleChange}\r\n        />\r\n      </header>\r\n    ) \r\n  }\r\n}\r\n\r\nexport default inject((stores, props, context) => {\r\n  console.log(stores)\r\n    return {\r\n        search: stores.appStore.search\r\n    }\r\n})(observer(Header))","import React from 'react'\r\nimport './styles.sass'\r\n\r\nconst Footer = props => <footer className=\"footer\"></footer>\r\n\r\nexport default Footer","import * as React from 'react'\r\nimport Plate from 'arui-feather/plate'\r\nimport Spin from 'arui-feather/spin'\r\nimport './styles.sass'\r\n\r\nclass Album extends React.Component {\r\n    state = {\r\n        images: [], \r\n        isValid: false\r\n    }\r\n    componentDidMount() {\r\n        const { album } = this.props\r\n        const images = []\r\n        const promise = new Promise((resolve, reject) => {\r\n            album.photos.map(photo => {\r\n                const img = new Image(150, 150)\r\n                img.src = photo.thumbnailUrl\r\n                img.onload = () => {\r\n                    images.push(img)\r\n                    if(images.length === album.photos.length) {\r\n                        resolve(images)\r\n                    }\r\n                }\r\n                return img\r\n            })\r\n        })\r\n        promise.then(res => this.setState({ isValid: true }))\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if(prevProps.album.id !== this.props.album.id) {\r\n            this.setState({ isValid: false })\r\n            const { album } = this.props\r\n            const images = []\r\n            const promise = new Promise((resolve, reject) => {\r\n                album.photos.map(photo => {\r\n                    const img = new Image(150, 150)\r\n                    img.src = photo.thumbnailUrl\r\n                    img.onload = () => {\r\n                        images.push(img)\r\n                        if(images.length === album.photos.length) {\r\n                            resolve(images)\r\n                        }\r\n                    }\r\n                    \r\n                })\r\n            })\r\n            promise.then(res => this.setState({ isValid: true }))\r\n        }\r\n    }\r\n\r\n    handleClick = ev => {\r\n        console.log(ev)\r\n    }\r\n    render() {\r\n        const { album } = this.props\r\n        const { isValid } = this.state\r\n        if(isValid) {\r\n            return (\r\n              <ul className=\"gallery\">\r\n                {album.photos.map((photo) => (\r\n                  <li key={photo.id} className=\"gallery__item\" onClick={this.handleClick}>\r\n                    <img src={photo.thumbnailUrl} alt={photo.title} />\r\n                    <span className=\"gallery__title\">{photo.title}</span>\r\n                  </li>))\r\n                  }\r\n              </ul>\r\n            )\r\n        }\r\n        return <Spin size='l' visible={true} className=\"loader\"/>\r\n    }\r\n    \r\n}\r\n\r\nexport default Album","import * as React from 'react'\r\nimport Spin from 'arui-feather/spin'\r\nimport { observable, decorate, toJS } from 'mobx'\r\nimport './styles.sass'\r\n\r\nclass SearchResults extends React.Component {\r\n    state = {\r\n        images: [], \r\n        isValid: false,\r\n        result: null,\r\n    }\r\n    componentDidMount() {\r\n        const { results } = this.props\r\n        console.log(toJS(results))\r\n        if (results.photos.length === 0) {\r\n            return this.setState({\r\n                result: 'Not found'\r\n            })\r\n        }\r\n        const images = []\r\n        const promise = new Promise((resolve, reject) => {\r\n            results.photos.map(photo => {\r\n                const img = new Image(150, 150)\r\n                img.src = photo.thumbnailUrl\r\n                img.onload = () => {\r\n                    images.push(img)\r\n                    if(images.length === results.photos.length) {\r\n                        resolve(images)\r\n                    }\r\n                }\r\n                return img\r\n            })\r\n        })\r\n        promise.then(res => this.setState({ isValid: true, result: null }))\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { results } = this.props\r\n        if(prevProps.results.searchId !== results.searchId) {\r\n            if (results.photos.length === 0) {\r\n                return this.setState({\r\n                    result: 'Not found'\r\n                })\r\n            }\r\n        \r\n        const images = []\r\n        const promise = new Promise((resolve, reject) => {\r\n            results.photos.map(photo => {\r\n                const img = new Image(150, 150)\r\n                img.src = photo.thumbnailUrl\r\n                img.onload = () => {\r\n                    images.push(img)\r\n                    if(images.length === results.photos.length) {\r\n                        resolve(images)\r\n                    }\r\n                }\r\n                return img\r\n            })\r\n        })\r\n        promise.then(res => this.setState({ isValid: true, result: null }))\r\n        }\r\n    }\r\n\r\n    handleClick = ev => {\r\n        console.log(ev)\r\n    }\r\n    render() {\r\n        const { results } = this.props\r\n        const { isValid, result } = this.state\r\n        console.log(results)\r\n        if(result) {\r\n            return <span>{result}</span>\r\n        }\r\n        if(isValid) {\r\n            return (\r\n              <ul className=\"gallery\">\r\n                {results.photos.map((photo) => (\r\n                  <li key={photo.id} className=\"gallery__item\" onClick={this.handleClick}>\r\n                    <img src={photo.thumbnailUrl} alt={photo.title} />\r\n                    <span className=\"gallery__title\">{photo.title}</span>\r\n                  </li>))\r\n                  }\r\n              </ul>\r\n            )\r\n        }\r\n        return <Spin size='l' visible={true} className=\"loader\"/>\r\n    }\r\n    \r\n}\r\n\r\nexport default SearchResults","import * as React from 'react'\r\nimport Select from 'arui-feather/select'\r\nimport Spin from 'arui-feather/spin'\r\nimport { observable, decorate, toJS } from 'mobx'\r\nimport { observer, inject } from 'mobx-react'\r\nimport Album from '../components/Album'\r\nimport SearchResults from '../components/SearchResults'\r\n\r\nclass App extends React.Component {\r\n\r\n  iteration = 0;\r\n\r\n  componentDidMount() {\r\n    const { fetchData } = this.props\r\n    fetchData()\r\n  }\r\n\r\n  handleChange = ev => {\r\n    const { setAlbumId } = this.props\r\n    setAlbumId(ev[0])\r\n    console.log(ev)\r\n  };\r\n\r\n  render() {\r\n    const { isLoading, selectOptions, isValid, album, searchResult } = this.props\r\n    console.log(toJS(album))\r\n    if (!isValid) {\r\n      return isLoading ? <Spin size='l' visible={true} className=\"loader\"/> : null\r\n    }\r\n    return (\r\n      <main className=\"container\">\r\n        <Select\r\n          mode='radio-check'\r\n          hideTick={true}\r\n          placeholder='Choose Album'\r\n          options={selectOptions}\r\n          onChange={this.handleChange}\r\n          className=\"select\"\r\n        />\r\n        {album && !searchResult? <Album album={album} /> : null}\r\n        {searchResult ? <SearchResults results={searchResult} /> : null}\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\r\ndecorate(App, {\r\n  iteration: observable,\r\n})\r\n\r\nexport default inject((stores, props, context) => {\r\n  console.log(stores)\r\n  const selectOptions = stores.appStore.photos.albums.map(el => ({ value: el.id, text: `Album - #${ el.id }` }))\r\n    return {\r\n        isLoading: stores.appStore.isLoading,\r\n        searchResult: stores.appStore.searchResult,\r\n        fetchData: stores.appStore.fetchData,\r\n        setAlbumId: stores.appStore.setAlbumId,\r\n        album: stores.appStore.album,\r\n        photos: stores.appStore.photos.albums,\r\n        isValid: stores.appStore.isValid,\r\n        selectOptions\r\n    }\r\n})(observer(App))\r\n","import React from 'react'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport App from './AppContainer'\n\nconst RootContainer = props => {\n  return (\n    <React.Fragment>\n      <Header />\n      <App />\n      <Footer />\n    </React.Fragment>\n  ) \n} \n\nexport default RootContainer","import { observable, action, decorate, toJS  } from 'mobx'\r\nimport { normalize, schema } from 'normalizr'\r\n\r\nclass AppStore {\r\n  photos = { albums: [] };\r\n  part = [];\r\n  iteration = 0;\r\n  isLoading = false;\r\n  isValid = false;\r\n  albumId = null;\r\n  album = null;\r\n  searchResult: null;\r\n  \r\n  fetchData = () => {\r\n    this.isLoading = true\r\n    fetch('https://jsonplaceholder.typicode.com/photos')\r\n    .then(res => res.json())\r\n    .then(json => {\r\n      action(() => {\r\n        this.photos = json.reduce((acc, val) => {\r\n          if(!acc.albums.length) {\r\n            acc.albums.push({ id: val.albumId })\r\n            acc.albums[acc.albums.length-1].photos = []\r\n          }\r\n          if (acc.albums[acc.albums.length-1].id !== val.albumId) {\r\n            acc.albums.push({ id: val.albumId })\r\n            acc.albums[acc.albums.length-1].photos = []\r\n          }\r\n          acc.albums[acc.albums.length-1].photos.push({ id: val.id, url: val.url,  title: val.title, thumbnailUrl: val.thumbnailUrl })\r\n          return acc\r\n        }, {\r\n          albums: []\r\n        })\r\n        this.isLoading = false\r\n        this.isValid = true\r\n      })()\r\n      \r\n    }).catch(e => {\r\n      this.isLoading = false\r\n      console.log(e)\r\n    })\r\n  }\r\n\r\n  search = word => {\r\n    if (word.length <= 3 && word.length !== 0) {\r\n      return\r\n    }\r\n    const result = this.photos.albums.reduce((acc, val) => {\r\n      const data = val.photos.reduce((accumulator, value) => {\r\n        if(value.title.includes(word)) {\r\n          accumulator.push(value)\r\n          return accumulator\r\n        }\r\n        return accumulator\r\n      }, [])\r\n      return {...acc, photos: [ ...acc.photos, ...data ]}\r\n    }, {searchId: +new Date(), photos: []})\r\n    if (word === '') {\r\n      this.searchResult = null\r\n      return\r\n    }\r\n    console.log(toJS(result))\r\n    this.searchResult = result\r\n  }\r\n\r\n  setAlbumId = id => {\r\n    this.albumId = id\r\n    this.album = this.photos.albums.filter(album => album.id === id)[0]\r\n  }\r\n\r\n  getPart = (a, value) => {\r\n    this.part = this.photos.slice(a, value)\r\n  }\r\n}\r\ndecorate(AppStore, {\r\n    iteration: observable,\r\n    searchResult: observable,\r\n    albumId: observable,\r\n    album: observable,\r\n    isValid: observable,\r\n    part: observable,\r\n    photos: observable,\r\n    isLoading: observable,\r\n    fetchData: action,\r\n    getPart: action,\r\n    search: action\r\n})\r\n\r\nconst appStore = new AppStore()\r\n\r\nexport default appStore\r\nexport { appStore }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider, propTypes } from 'mobx-react'\nimport RootContainer from './containers/RootContainer'\nimport appStore from './store'\nimport './index.sass'\nimport * as serviceWorker from './serviceWorker'\n\nconst stores = { appStore }\n\nReactDOM.render(\n  <Provider {...stores}>\n    <RootContainer />\n  </Provider>, document.getElementById('root'))\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/gallery.70619ac9.svg\";"],"sourceRoot":""}