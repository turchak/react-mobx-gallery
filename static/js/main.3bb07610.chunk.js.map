{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/Album/idnex.js","containers/AppContainer.js","containers/RootContainer.js","store/index.js","serviceWorker.js","index.js","assets/img/gallery.svg"],"names":["Header","handleChange","ev","console","log","react","className","href","src","logo","alt","input_default","a","placeholder","view","size","onChange","this","React","Footer","props","react_default","createElement","Album","state","images","isValid","_this2","album","Promise","resolve","reject","photos","map","photo","img","Image","thumbnailUrl","onload","push","length","then","res","setState","prevProps","prevState","_this3","id","key","title","spin_default","visible","App","iteration","setAlbumId","_this","fetchData","_this$props","isLoading","selectOptions","toJS","select_default","mode","hideTick","options","idnex","decorate","observable","inject","stores","context","appStore","albums","el","value","text","concat","observer","RootContainer","Fragment","components_Header","AppContainer","components_Footer","AppStore","part","albumId","fetch","json","action","reduce","acc","val","url","catch","e","filter","getPart","slice","Boolean","window","location","hostname","match","ReactDOM","render","index_module","containers_RootContainer","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.3bb07610.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport Input from 'arui-feather/input'\r\nimport logo from '../../assets/img/gallery.svg'\r\nimport './styles.sass'\r\n\r\nclass Header extends React.Component {\r\n\r\n  handleChange = ev => {\r\n    console.log(ev)\r\n  }\r\n\r\n  render() {\r\n    return  (\r\n      <header className=\"header\">\r\n        <a href=\"/\" className=\"logo\">\r\n          <img src={logo} className=\"logo__img\"alt=\"logo\"/>\r\n        </a>\r\n        <Input\r\n          placeholder='Search'\r\n          view='line'\r\n          size='l'\r\n          onChange={this.handleChange}\r\n        />\r\n      </header>\r\n    ) \r\n  }\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport './styles.sass'\r\n\r\nconst Footer = props => <footer className=\"footer\"></footer>\r\n\r\nexport default Footer","import * as React from 'react'\r\nimport Plate from 'arui-feather/plate'\r\nimport Spin from 'arui-feather/spin'\r\nimport './styles.sass'\r\n\r\nclass Album extends React.Component {\r\n    state = {\r\n        images: [], \r\n        isValid: false\r\n    }\r\n    componentDidMount() {\r\n        const { album } = this.props\r\n        const images = []\r\n        const promise = new Promise((resolve, reject) => {\r\n            album.photos.map(photo => {\r\n                const img = new Image(150, 150)\r\n                img.src = photo.thumbnailUrl\r\n                img.onload = () => {\r\n                    images.push(img)\r\n                    if(images.length === album.photos.length) {\r\n                        resolve(images)\r\n                    }\r\n                }\r\n                return img\r\n            })\r\n        })\r\n        promise.then(res => this.setState({ isValid: true }))\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if(prevProps.album.id !== this.props.album.id) {\r\n            this.setState({ isValid: false })\r\n            const { album } = this.props\r\n            const images = []\r\n            const promise = new Promise((resolve, reject) => {\r\n                album.photos.map(photo => {\r\n                    const img = new Image(150, 150)\r\n                    img.src = photo.thumbnailUrl\r\n                    img.onload = () => {\r\n                        images.push(img)\r\n                        if(images.length === album.photos.length) {\r\n                            resolve(images)\r\n                        }\r\n                    }\r\n                    \r\n                })\r\n            })\r\n            promise.then(res => this.setState({ isValid: true }))\r\n        }\r\n    }\r\n    render() {\r\n        const { album } = this.props\r\n        const { isValid } = this.state\r\n        if(isValid) {\r\n            return (\r\n              <ul className=\"gallery\">\r\n                {album.photos.map((photo) => (<li key={photo.id} className=\"gallery__item\">\r\n                  <img src={photo.thumbnailUrl} alt={photo.title} />\r\n                </li>))\r\n                  }\r\n              </ul>\r\n            )\r\n        }\r\n        return <Spin size='l' visible={true} className=\"loader\"/>\r\n    }\r\n    \r\n}\r\n\r\nexport default Album","import * as React from 'react'\r\nimport Button from 'arui-feather/button'\r\nimport Select from 'arui-feather/select'\r\nimport Spin from 'arui-feather/spin'\r\nimport { observable, decorate, toJS } from 'mobx'\r\nimport { observer, inject } from 'mobx-react'\r\nimport Album from '../components/Album/idnex'\r\n\r\nclass App extends React.Component {\r\n\r\n  iteration = 0;\r\n\r\n  componentDidMount() {\r\n    const { fetchData } = this.props\r\n    fetchData()\r\n  }\r\n\r\n  handleChange = ev => {\r\n    const { setAlbumId } = this.props\r\n    setAlbumId(ev[0])\r\n    console.log(ev)\r\n  };\r\n\r\n  render() {\r\n    const { isLoading, selectOptions, isValid, album } = this.props\r\n    console.log(toJS(album))\r\n    if (!isValid) {\r\n      return isLoading ? <Spin size='l' visible={true} className=\"loader\"/> : null\r\n    }\r\n    return (\r\n      <main className=\"container\">\r\n        <Select\r\n          mode='radio-check'\r\n          hideTick={true}\r\n          placeholder='Choose Album'\r\n          options={selectOptions}\r\n          onChange={this.handleChange}\r\n          className=\"select\"\r\n        />\r\n        {album ? <Album album={album} /> : null}\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\r\ndecorate(App, {\r\n  iteration: observable,\r\n})\r\n\r\nexport default inject((stores, props, context) => {\r\n  console.log(stores)\r\n  const selectOptions = stores.appStore.photos.albums.map(el => ({ value: el.id, text: `Album - #${ el.id }` }))\r\n    return {\r\n        isLoading: stores.appStore.isLoading,\r\n        fetchData: stores.appStore.fetchData,\r\n        setAlbumId: stores.appStore.setAlbumId,\r\n        album: stores.appStore.album,\r\n        photos: stores.appStore.photos.albums,\r\n        isValid: stores.appStore.isValid,\r\n        selectOptions\r\n    }\r\n})(observer(App))\r\n","import React from 'react'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport App from './AppContainer'\n\nconst RootContainer = props => {\n  return (\n    <React.Fragment>\n      <Header />\n      <App />\n      <Footer />\n    </React.Fragment>\n  ) \n} \n\nexport default RootContainer","import { observable, action, decorate, toJS  } from 'mobx'\r\nimport { normalize, schema } from 'normalizr'\r\n\r\nclass AppStore {\r\n  photos = { albums: [] };\r\n  part = [];\r\n  iteration = 0;\r\n  isLoading = false;\r\n  isValid = false;\r\n  albumId = null;\r\n  album = null;\r\n  \r\n  fetchData = () => {\r\n    this.isLoading = true\r\n    fetch('https://jsonplaceholder.typicode.com/photos')\r\n    .then(res => res.json())\r\n    .then(json => {\r\n      action(() => {\r\n        this.photos = json.reduce((acc, val) => {\r\n          if(!acc.albums.length) {\r\n            acc.albums.push({ id: val.albumId })\r\n            acc.albums[acc.albums.length-1].photos = []\r\n          }\r\n          if (acc.albums[acc.albums.length-1].id !== val.albumId) {\r\n            acc.albums.push({ id: val.albumId })\r\n            acc.albums[acc.albums.length-1].photos = []\r\n          }\r\n          acc.albums[acc.albums.length-1].photos.push({ id: val.id, url: val.url,  title: val.title, thumbnailUrl: val.thumbnailUrl })\r\n          return acc\r\n        }, {\r\n          albums: []\r\n        })\r\n        this.isLoading = false\r\n        this.isValid = true\r\n      })()\r\n      \r\n    }).catch(e => {\r\n      this.isLoading = false\r\n      console.log(e)\r\n    })\r\n  }\r\n\r\n  setAlbumId = id => {\r\n    this.albumId = id\r\n    this.album = this.photos.albums.filter(album => album.id === id)[0]\r\n  }\r\n\r\n  getPart = (a, value) => {\r\n    this.part = this.photos.slice(a, value)\r\n  }\r\n}\r\ndecorate(AppStore, {\r\n    iteration: observable,\r\n    albumId: observable,\r\n    album: observable,\r\n    isValid: observable,\r\n    part: observable,\r\n    photos: observable,\r\n    isLoading: observable,\r\n    fetchData: action,\r\n    getPart: action,\r\n})\r\n\r\nconst appStore = new AppStore()\r\n\r\nexport default appStore\r\nexport { appStore }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider, propTypes } from 'mobx-react'\nimport RootContainer from './containers/RootContainer'\nimport appStore from './store'\nimport './index.sass'\nimport * as serviceWorker from './serviceWorker'\n\nconst stores = { appStore }\n\nReactDOM.render(\n  <Provider {...stores}>\n    <RootContainer />\n  </Provider>, document.getElementById('root'))\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/gallery.70619ac9.svg\";"],"sourceRoot":""}