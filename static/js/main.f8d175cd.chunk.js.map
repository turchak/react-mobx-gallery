{"version":3,"sources":["containers/PhotosContainer.js","containers/AppContainer.js","components/Footer/index.js","components/Header/index.js","containers/RootContainer.js","constants/ApiConstants.js","services/ApiService.js","stores/AlbumsStore.js","stores/PhotosStore.js","stores/RouterStore.js","stores/index.js","serviceWorker.js","index.js"],"names":["PhotosContainer","_this$props","this","props","selectedPhotos","isLoading","react","spin_default","a","size","visible","className","map","photo","key","id","src","thumbnailUrl","alt","title","React","inject","stores","_stores$rootStore","rootStore","photosStore","albumsStore","routerStore","observer","AppContainer","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","ev","getPhotos","window","location","hash","concat","target","value","selectRef","fetchAlbums","fetchPhotos","prevProps","_this$props2","albumId","photos","length","console","log","current","_this$props3","selectOptions","name","defaultValue","ref","onChange","disabled","option","text","containers_PhotosContainer","albums","reduce","acc","val","push","url","slice","lastIndexOf","Number","getAlbumId","changeUrl","Footer","react_default","createElement","Header","RootContainer","switchRoute","containers_AppContainer","components_Header","components_Footer","mobx_react_devtools_default","DOMAIN_ULR","ALBUMS_URL","PHOTOS_URL","API","getAlbums","get","fetch","method","then","response","error","json","errorMessage","message","split","index","toUpperCase","join","Error","JSON","stringify","errorCode","status","info","timestamp","stack","Date","AlbumsStore","runInAction","catch","setAlbumId","decorate","observable","action","PhotosStore","sortedPhotos","Promise","resolve","reject","images","img","Image","onload","RouterStore","pathname","addEventListener","RootStore","Boolean","hostname","match","ReactDOM","render","index_module","containers_RootContainer","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f8d175cd.chunk.js","sourcesContent":["import * as React from 'react'\r\n\r\nimport { inject, observer } from 'mobx-react'\r\n\r\nimport Spin from 'arui-feather/spin'\r\n\r\nclass PhotosContainer extends React.Component {\r\n  // componentDidMount() {\r\n  //   // this.updatePhotos()\r\n  // }\r\n  // updatePhotos = () => {\r\n  //   const { album } = this.props\r\n  //   const images = []\r\n  //   const promise = new Promise((resolve, reject) => {\r\n  //     album.photos.map(photo => {\r\n  //       const img = new Image(150, 150)\r\n  //       img.src = photo.thumbnailUrl\r\n  //       img.onload = () => {\r\n  //         images.push(img)\r\n  //         if(images.length === album.photos.length) {\r\n  //           resolve(images)\r\n  //         }\r\n  //       }\r\n  //       return img\r\n  //     })\r\n  //   })\r\n  //   promise.then(res => this.setState({ isValid: true }))\r\n  // }\r\n\r\n  render() {\r\n    const { selectedPhotos, isLoading } = this.props\r\n    // console.log(selectedPhotos)\r\n    return (\r\n      <>\r\n        <Spin size='l' visible={isLoading} className=\"loader\" />\r\n        <ul>\r\n          {selectedPhotos.map(photo => (\r\n            <li key={photo.id}>\r\n              <img src={photo.thumbnailUrl} alt={photo.title} />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default inject(stores => {\r\n  const { albumsStore, routerStore, photosStore } = stores.rootStore\r\n  return {\r\n    isLoading: photosStore.isLoading,\r\n    selectedPhotos: photosStore.selectedPhotos\r\n  }\r\n})(observer(PhotosContainer))","import * as React from 'react'\r\n\r\nimport { inject, observer } from 'mobx-react'\r\n\r\nimport PhotosContainer from './PhotosContainer'\r\n\r\n// import { toJS } from 'mobx'\r\n\r\nclass AppContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.selectRef = new React.createRef()\r\n  }\r\n  \r\n  componentDidMount() {\r\n    const { fetchAlbums, fetchPhotos } = this.props\r\n    fetchAlbums()\r\n    fetchPhotos()\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    \r\n    const { albumId, getPhotos, photos } = this.props\r\n    // console.log('TCL: AppContainer -> componentDidUpdate -> photos', photos)\r\n    // console.log('TCL: AppContainer -> componentDidUpdate -> prevProps',prevProps.albumId )\r\n    // console.log('TCL: AppContainer -> componentDidUpdate -> albumId', albumId)\r\n    \r\n    // console.log('update')\r\n    \r\n    if(prevProps.albumId !== albumId || prevProps.photos.length !== photos.length) {\r\n      getPhotos(albumId)\r\n      console.log('TCL: AppContainer -> componentDidUpdate -> albumId', albumId)\r\n      if (!this.props.albumId) {\r\n        this.selectRef.current.value = 0\r\n        return \r\n      }\r\n      this.selectRef.current.value = albumId\r\n    }\r\n  }\r\n\r\n  handleChange = ev => {\r\n    const { getPhotos } = this.props\r\n    window.location.hash = `/album/${ev.target.value}`\r\n    getPhotos(ev.target.value)\r\n  }\r\n\r\n  render() {\r\n    const { selectOptions, albumId } = this.props\r\n    return (\r\n      <div className=\"container\">\r\n        <select \r\n          className=\"select\"\r\n          name=\"albums\" \r\n          defaultValue={0} \r\n          ref={this.selectRef} \r\n          onChange={this.handleChange}\r\n        >\r\n          <option value=\"0\" disabled>Choose Album</option>\r\n          {selectOptions.map(option => <option key={option.value} value={option.value}>{option.text}</option>)}\r\n        </select>\r\n        <PhotosContainer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default inject(stores => {\r\n  const { albumsStore, routerStore, photosStore } = stores.rootStore\r\n  const selectOptions = albumsStore.albums\r\n    .reduce((acc, val) => {\r\n      acc.push({ value: val.id, text: val.title })\r\n      return acc\r\n    }, [])\r\n\r\n  const getAlbumId = (albums, url) => {\r\n    if (albums.length && url !== '/') {\r\n      const id = url.slice(url.lastIndexOf('/') +1, url.length)\r\n      return Number(id)\r\n    }\r\n    return null\r\n  }\r\n  \r\n  const albumId = getAlbumId(albumsStore.albums, routerStore.url)\r\n  return {\r\n    url: routerStore.url,\r\n    fetchPhotos: photosStore.fetchPhotos,\r\n    fetchAlbums: albumsStore.fetchAlbums,\r\n    changeUrl: routerStore.changeUrl,\r\n    getPhotos: photosStore.getPhotos,\r\n    photos: photosStore.photos,\r\n    selectOptions,\r\n    albumId,\r\n  }\r\n})(observer(AppContainer))\r\n","import React from 'react'\r\nimport './styles.sass'\r\n\r\nconst Footer = props => <footer className=\"footer\"></footer>\r\n\r\nexport default Footer","import * as React from 'react'\r\nimport './styles.sass'\r\n\r\nclass Header extends React.Component {\r\n\r\n  render() {\r\n    return  (\r\n      <header className=\"header\"></header>\r\n    ) \r\n  }\r\n}\r\n\r\nexport default Header","import * as React from 'react'\r\n\r\nimport { inject, observer } from 'mobx-react'\r\n\r\nimport AppContainer from './AppContainer'\r\nimport DevTools from 'mobx-react-devtools'\r\nimport Footer from '../components/Footer'\r\nimport Header from '../components/Header'\r\nimport PhotosContainer from './PhotosContainer'\r\n\r\nclass RootContainer extends React.Component {\r\n\r\n  switchRoute = url => {\r\n    switch (url) {\r\n    case '/':\r\n      return <AppContainer />\r\n    case '/photos':\r\n      return <PhotosContainer />\r\n    default:\r\n      return <AppContainer />\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { url } = this.props\r\n    return (\r\n      <>\r\n        <Header />\r\n        {this.switchRoute(url)}\r\n        <Footer />\r\n        <DevTools /> \r\n      </>\r\n    )\r\n  \r\n  }\r\n}\r\n\r\nexport default inject(stores => ({\r\n  url: stores.rootStore.routerStore.url,\r\n  changeUrl: stores.rootStore.routerStore.changeUrl,\r\n}))(observer(RootContainer))","export const DOMAIN_ULR = 'https://jsonplaceholder.typicode.com'\r\nexport const ALBUMS_PATH = '/albums'\r\nexport const PHOTOS_PATH = '/photos'\r\nexport const ALBUMS_URL = `${DOMAIN_ULR}${ALBUMS_PATH}`\r\nexport const PHOTOS_URL = `${DOMAIN_ULR}${PHOTOS_PATH}`","import { ALBUMS_URL, PHOTOS_URL } from '../constants/ApiConstants'\r\n\r\nclass ApiService {\r\n  getAlbums = () => this.get(ALBUMS_URL)\r\n\tgetPhotos = () => this.get(PHOTOS_URL)\r\n  get = (url) =>\r\n  \t\tfetch(url, { method: 'get' })\r\n      .then((response, error ) => {\r\n      \tif (response) {\r\n      \t\treturn response.json()\r\n        }\r\n      \treturn error\r\n      })\r\n      .then(json => {\r\n        if (json.error) {\r\n          const errorMessage = json.message\r\n            .split('')\r\n            .reduce((acc, val, index) => {\r\n              if (index === 0) {\r\n                acc.push(val.toUpperCase())\r\n                return acc\r\n              }\r\n              acc.push(val)\r\n              return acc\r\n            }, []).join('')\r\n          throw new Error(\r\n            JSON.stringify({\r\n              errorCode: json.status,\r\n              info: json.error,\r\n              message: errorMessage || 'Error',\r\n              status: json.status,\r\n              timestamp: json.timestamp,\r\n            })\r\n          )\r\n        }\r\n        return json\r\n      }, error => {\r\n        throw new Error(\r\n          JSON.stringify({\r\n            errorCode: error.status || 0,\r\n            info: error.stack || 'Error',\r\n            message: error.message || 'Error',\r\n            status: error.status || 0,\r\n            timestamp: +new Date(),\r\n          })\r\n        )\r\n      })\r\n}\r\n\r\nconst API = new ApiService()\r\nexport default API","import {\r\n  action,\r\n  decorate,\r\n  observable,\r\n  runInAction\r\n} from 'mobx'\r\n\r\nimport API from '../services/ApiService'\r\n\r\nclass AlbumsStore {\r\n  constructor(rootStore) {\r\n    this.rootStore = rootStore\r\n    this.albums = []\r\n    this.albumId = null\r\n    this.isLoading = false\r\n    this.error = null\r\n  }\r\n\r\n  fetchAlbums = () => {\r\n    this.isLoading = true\r\n    API.getAlbums()\r\n      .then(json => runInAction(() => {\r\n        this.isLoading = false\r\n        this.albums = json\r\n      }))\r\n      .catch(error => runInAction(() => {\r\n        this.isLoading = false\r\n        this.error = error\r\n      }))\r\n  }\r\n\r\n  setAlbumId = id => {\r\n    this.albumId = id\r\n  }\r\n}\r\ndecorate(AlbumsStore, {\r\n  albums: observable,\r\n  albumId: observable,\r\n  isLoading: observable,\r\n  fetchAlbums: action,\r\n})\r\n\r\nexport default AlbumsStore","import {\r\n  action,\r\n  decorate,\r\n  observable,\r\n  runInAction\r\n} from 'mobx'\r\n\r\nimport API from '../services/ApiService'\r\n\r\nclass PhotosStore {\r\n  constructor(rootStore) {\r\n    this.rootStore = rootStore\r\n    this.photos = []\r\n    this.isLoading = false\r\n    this.selectedPhotos = []\r\n  }\r\n\r\n\tfetchPhotos = () => {\r\n\t  this.isLoading = true\r\n\r\n\t  API.getPhotos()\r\n\t    .then(json =>\r\n\t      runInAction(() => {\r\n\t        this.isLoading = false\r\n\t        this.photos = json\r\n\t      })\r\n\t    )\r\n\t    .catch(error =>\r\n\t      runInAction(() => {\r\n\t        this.isLoading = false\r\n\t        this.error = error\r\n\t      })\r\n\t    )\r\n\t}\r\n\r\n\tgetPhotos = id => {\r\n\t  console.log('TCL: PhotosStore -> id', id)\r\n\t  this.selectedPhotos = []\r\n\r\n\t  console.log('TCL: PhotosStore -> isLoading', this.isLoading)\r\n\t  if (id && !this.isLoading) {\r\n\t    this.isLoading = true\r\n\t    \r\n\t    const sortedPhotos = this.photos.reduce((acc, val) => {\r\n\t\t\t\t\r\n\t      if (val.albumId === Number(id)) {\r\n\t        acc.push(val)\r\n\t        return acc\r\n\t      }\r\n\t      return acc\r\n\t    }, [])\r\n\t    console.log('TCL: PhotosStore -> sortedPhotos', sortedPhotos)\r\n\t    const promise = new Promise((resolve, reject) => {\r\n\t      let images = 0\r\n\t      sortedPhotos.map(photo => {\r\n\t        const img = new Image(150, 150)\r\n\t        img.src = photo.thumbnailUrl\r\n\t        img.onload = () => {\r\n\t          images++\r\n\t          if (sortedPhotos.length === images) {\r\n\t\t\t\t\t\t\t\r\n\t            resolve(sortedPhotos)\r\n\t          }\r\n\t        }\r\n\t        return photo\r\n\t      })\r\n\t    })\r\n\t    promise.then(photos => {\r\n\t      runInAction(() => {\r\n\t        console.log('TCL: PhotosStore -> this.isLoading', this.isLoading)\r\n\t        if(!this.isLoading) {\r\n\t          this.selectedPhotos = []\r\n\t          return \r\n\t        }\r\n\t        this.isLoading = false\r\n\t        this.selectedPhotos = photos\r\n\t      })\r\n\t    })\r\n\t  }\r\n\t}\r\n\r\n}\r\ndecorate(PhotosStore, {\r\n  photos: observable,\r\n  isLoading: observable,\r\n  selectedPhotos: observable,\r\n  fetchAlbums: action,\r\n  getPhotos: action,\r\n})\r\n\r\nexport default PhotosStore","import { action, decorate, observable } from 'mobx'\r\n\r\nclass RouterStore {\r\n  constructor(rootStore) {\r\n    this.rootStore = rootStore\r\n    this.url = window.location.hash\r\n    window.addEventListener( 'hashchange', ev => { \r\n      this.changeUrl(`${ev.target.location.hash}`)\r\n    })\r\n    this.changeUrl(`${window.location.hash}`)\r\n  }\r\n\r\n\tchangeUrl = pathname => {\r\n\t  this.url = `/${pathname}`\r\n\t}\r\n}\r\ndecorate(RouterStore, {\r\n  url: observable,\r\n  changeUrl: action,\r\n})\r\n\r\nexport default RouterStore","import AlbumsStore from './AlbumsStore'\r\nimport PhotosStore from './PhotosStore'\r\nimport RouterStore from './RouterStore'\r\nclass RootStore {\r\n  constructor() {\r\n    this.albumsStore = new AlbumsStore(this)\r\n    this.photosStore = new PhotosStore(this)\r\n    this.routerStore = new RouterStore(this)\r\n  }\r\n}\r\n\r\nexport default RootStore","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'mobx-react'\r\nimport RootContainer from './containers/RootContainer'\r\nimport RootStore from './stores'\r\nimport './index.sass'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n  <Provider rootStore={new RootStore()}>\r\n    <RootContainer />\r\n  </Provider>, document.getElementById('root'))\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}